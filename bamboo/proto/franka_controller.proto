syntax = 'proto3';
import "google/protobuf/any.proto";

// Goal specification for joint space control

message JointGoal {
  bool is_delta = 1;
  double q1 = 2;
  double q2 = 3;
  double q3 = 4;
  double q4 = 5;
  double q5 = 6;
  double q6 = 7;
  double q7 = 8;
}

// Goal specification for task space control

message Goal {
  bool is_delta = 1;
  double x = 2;
  double y = 3;
  double z = 4;

  double ax = 5;
  double ay = 6;
  double az = 7;
}

// Franka State Estimator Configuration

message ExponentialSmoothingConfig {
  double alpha_q = 1;
  double alpha_dq = 2;
  double alpha_eef = 3;
  double alpha_eef_vel = 4;
}

message FrankaStateEstimatorMessage {
  bool is_estimation = 1;
  enum EstimatorType {
    NO_ESTIMATOR = 0;
    EXPONENTIAL_SMOOTHING_ESTIMATOR = 1;
  }
  EstimatorType estimator_type = 2;
  google.protobuf.Any config = 5;
}

// Franka OSC Controller Configuration

message FrankaOSCControllerConfig {
  repeated double residual_mass_vec = 1; // The manual residual mass matrix to add on the internal mass matrix
  repeated double residual_tau_translation_vec = 2; // The manual translational force applied to the tau
  repeated double residual_tau_rotation_vec = 3; // The manual residual rotational force applied to the tau
  double coriolis_stiffness = 4;
  double nullspace_stiffness = 5;
  repeated double nullspace_static_q = 6;
  repeated double joint_limits_avoidance = 7;
  repeated double joint_tau_limits = 8;
  bool use_diff_ik = 9;
  repeated double diff_ik_kp = 10;
  repeated double diff_ik_kd = 11;
}

message FrankaJointImpedanceConfig {
  bool enable_residual_tau = 1;
  repeated double residual_tau_translation_vec = 2;
  repeated double residual_tau_rotation_vec = 3;
}

// Franka Gripper control messages

message FrankaGripperHomingMessage { bool homing = 1; }

message FrankaGripperMoveMessage {
  double width = 1;
  double speed = 2;
}

message FrankaGripperStopMessage { bool stop = 1; }

message FrankaGripperGraspMessage {
  double width = 1;
  double speed = 2;
  double force = 3;
  double epsilon_inner = 4;
  double epsilon_outer = 5;
}

// Unified message interface for gripper control

message FrankaGripperControlMessage {
  bool termination = 1;
  google.protobuf.Any control_msg = 2;
}

// Arm control messages

message FrankaDummyControllerMessage {
  Goal goal = 1;
  bool termination = 2;
}

message FrankaOSCPoseControllerMessage {
  Goal goal = 1;
  repeated double translational_stiffness = 2;
  repeated double rotational_stiffness = 3;
  repeated double translational_damping = 4;
  repeated double rotational_damping = 5;
  bool termination = 6;
  FrankaOSCControllerConfig config = 7;
}

message FrankaJointPositionControllerMessage {
  JointGoal goal = 1;
  double kp_gains = 2;
  double kd_gains = 3;
  double speed_factor = 4;
  repeated double joint_tau_limits = 5;
}

message FrankaJointImpedanceControllerMessage {
  JointGoal goal = 1;
  repeated double kp = 2;
  repeated double kd = 3;
  repeated double joint_tau_limits = 4;
  FrankaJointImpedanceConfig config = 5;
}

message FrankaCartesianVelocityControllerMessage {
  Goal goal = 1;
  double kp_gains = 2;
  double kd_gains = 3;
  double speed_factor=4;
}

// TODO(Yifeng) Placeholder for now

message FrankaJointVelocityControllerMessage {
  JointGoal goal = 1;
  double kp_gains = 2;
  double kd_gains = 3;
}

// TODO(Yifeng) Placeholder for now

message FrankaJointTorqueControllerMessage {
  JointGoal goal = 1;
  double kp_gains = 2;
  double kd_gains = 3;
}

// Unified message interface for arm control
message FrankaControlMessage {
  bool termination = 1;
  enum ControllerType {
    NO_CONTROL = 0;
    OSC_POSE = 1;
    OSC_POSITION = 2;
    JOINT_POSITION = 3;
    JOINT_IMPEDANCE = 4;
    JOINT_VELOCITY = 5;
    TORQUE = 6;
    OSC_YAW = 7;
    CARTESIAN_VELOCITY = 8;
  }
  ControllerType controller_type = 2;
  enum TrajInterpolatorType {
    NO_OP = 0;
    LINEAR_POSITION = 1;
    LINEAR_POSE = 2;
    MIN_JERK_POSE = 3;
    SMOOTH_JOINT_POSITION = 4;
    MIN_JERK_JOINT_POSITION = 5;
    LINEAR_JOINT_POSITION = 6;
    COSINE_CARTESIAN_VELOCITY = 7;
    LINEAR_CARTESIAN_VELOCITY = 8;
    LINEAR_JOINT_VELOCITY = 9;
  }
  TrajInterpolatorType traj_interpolator_type = 3;
  double traj_interpolator_time_fraction = 4;
  google.protobuf.Any control_msg = 5;
  double timeout = 6;
  FrankaStateEstimatorMessage state_estimator_msg = 7;
}

// Robot state response message
message FrankaRobotStateMessage {
  repeated double O_T_EE = 1;
  repeated double O_T_EE_d = 2;
  repeated double F_T_EE = 3;
  repeated double F_T_NE = 4;
  repeated double NE_T_EE = 5;
  repeated double EE_T_K = 6;
  double m_ee = 7;
  repeated double I_ee = 8;
  repeated double F_x_Cee = 9;
  double m_load = 10;
  repeated double I_load = 11;
  repeated double F_x_Cload = 12;
  double m_total = 13;
  repeated double I_total = 14;
  repeated double F_x_Ctotal = 15;
  repeated double elbow = 16;
  repeated double elbow_d = 17;
  repeated double elbow_c = 18;
  repeated double delbow_c = 19;
  repeated double ddelbow_c = 20;
  repeated double tau_J = 21;
  repeated double tau_J_d = 22;
  repeated double dtau_J = 23;
  repeated double q = 24;
  repeated double q_d = 25;
  repeated double dq = 26;
  repeated double dq_d = 27;
  repeated double ddq_d = 28;
  repeated double joint_contact = 29;
  repeated double cartesian_contact = 30;
  repeated double joint_collision = 31;
  repeated double cartesian_collision = 32;
  repeated double tau_ext_hat_filtered = 33;
  repeated double O_F_ext_hat_K = 34;
  repeated double K_F_ext_hat_K = 35;
  repeated double O_dP_EE_d = 36;
  repeated double O_T_EE_c = 37;
  repeated double O_dP_EE_c = 38;
  repeated double O_ddP_EE_c = 39;
  repeated double theta = 40;
  repeated double dtheta = 41;
  repeated double generalized_gravity = 42;
  repeated double generalized_coriolis = 43;
  repeated double jacobian_T_EE = 44;

  message Errors {
    bool joint_position_limits_violation = 1;
    bool cartesian_position_limits_violation = 2;
    bool self_collision_avoidance_violation = 3;
    bool joint_velocity_violation = 4;
    bool cartesian_velocity_violation = 5;
    bool force_control_safety_violation = 6;
    bool joint_reflex = 7;
    bool cartesian_reflex = 8;
    bool max_goal_pose_deviation_violation = 9;
    bool max_path_pose_deviation_violation = 10;
    bool cartesian_velocity_profile_safety_violation = 11;
    bool joint_position_motion_generator_start_pose_invalid = 12;
    bool joint_motion_generator_position_limits_violation = 13;
    bool joint_motion_generator_velocity_limits_violation = 14;
    bool joint_motion_generator_velocity_discontinuity = 15;
    bool joint_motion_generator_acceleration_discontinuity = 16;
    bool cartesian_position_motion_generator_start_pose_invalid = 17;
    bool cartesian_motion_generator_elbow_limit_violation = 18;
    bool cartesian_motion_generator_velocity_limits_violation = 19;
    bool cartesian_motion_generator_velocity_discontinuity = 20;
    bool cartesian_motion_generator_acceleration_discontinuity = 21;
    bool cartesian_motion_generator_elbow_sign_inconsistent = 22;
    bool cartesian_motion_generator_start_elbow_invalid = 23;
    bool cartesian_motion_generator_joint_position_limits_violation = 24;
    bool cartesian_motion_generator_joint_velocity_limits_violation = 25;
    bool cartesian_motion_generator_joint_velocity_discontinuity = 26;
    bool cartesian_motion_generator_joint_acceleration_discontinuity = 27;
    bool cartesian_position_motion_generator_invalid_frame = 28;
    bool force_controller_desired_force_tolerance_violation = 29;
    bool controller_torque_discontinuity = 30;
    bool start_elbow_sign_inconsistent = 31;
    bool communication_constraints_violation = 32;
    bool power_limit_violation = 33;
    bool joint_p2p_insufficient_torque_for_planning = 34;
    bool tau_j_range_violation = 35;
    bool instability_detected = 36;
    bool joint_move_in_wrong_direction = 37;
  }

  Errors current_errors = 45;
  Errors last_motion_errors = 46;

  double control_command_success_rate = 47;

  enum RobotMode {
    Other = 0;
    Idle = 1;
    Move = 2;
    Guiding = 3;
    Reflex = 4;
    UserStopped = 5;
    AutomaticErrorRecovery = 6;
  }

  RobotMode robot_mode = 48;
  message Duration {
    double toSec = 1;
    uint64 toMSec = 2;
  }

  Duration time = 49;

  repeated double current_robot_poses_frames = 50;

  uint64 frame = 51;
}

