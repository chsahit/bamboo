[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "bamboo-franka-controller"
version = "0.1.0"
description = "Bamboo Franka Robot Controller with Joint Impedance Control"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Bamboo Development Team"},
]
keywords = ["robotics", "franka", "control", "impedance", "robot"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    # Core scientific computing
    "numpy>=1.20.0",

    # Communication and messaging
    "pyzmq>=22.0.0",
    "protobuf>=3.12.0",

    # Optional robotics utilities
    "scipy>=1.7.0",
    "matplotlib>=3.3.0",
]

[project.optional-dependencies]
dev = [
    # Development and testing
    "pytest>=6.0.0",
    "pytest-cov>=2.10.0",
    "black>=21.0.0",
    "isort>=5.0.0",
    "flake8>=3.8.0",
    "mypy>=0.800",
]

robotics = [
    # Additional robotics libraries
    "robotics-toolbox-python>=1.0.0",
    "spatialmath-python>=1.0.0",
    "pinocchio>=2.6.0",  # If available via pip
]

visualization = [
    # Plotting and visualization
    "matplotlib>=3.3.0",
    "plotly>=5.0.0",
    "seaborn>=0.11.0",
]

all = [
    "bamboo-franka-controller[dev,robotics,visualization]"
]

[project.urls]
Homepage = "https://github.com/your-org/bamboo"
Documentation = "https://bamboo-docs.readthedocs.io"
Repository = "https://github.com/your-org/bamboo.git"
"Bug Tracker" = "https://github.com/your-org/bamboo/issues"

[project.scripts]
bamboo-test-joint-offset = "bamboo.examples.test_joint_offset:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["bamboo*"]
exclude = ["tests*", "docs*", "protobuf*", "libfranka*", "minimal_joint_impedance*", "zmqpp*", "install*", "build*"]

[tool.setuptools.package-data]
"bamboo.examples" = ["*.proto", "*.py"]
"bamboo.proto" = ["*.proto"]

# Development tool configurations
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | protobuf
  | libfranka
  | install
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["bamboo"]
skip_glob = ["protobuf/*", "libfranka/*", "install/*", "build/*"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [
    "protobuf/",
    "libfranka/",
    "install/",
    "build/",
    "minimal_joint_impedance/",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=bamboo",
    "--cov-report=html",
    "--cov-report=term-missing",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["bamboo"]
omit = [
    "*/tests/*",
    "*/protobuf/*",
    "*/libfranka/*",
    "*/install/*",
    "*/build/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]